{"version":3,"file":"react-push-preview.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["import * as React from 'react'\n\nexport type PushPreviewTarget = 'DesktopChrome' | 'DeskopFirefox' | 'DesktopMacOS' | 'MobileAndroid' | 'MobileIOS';\n\nexport interface PushPreviewProps {\n    // The name of the app (for mobile push).\n    appName?: string;\n\n    // The target platform.\n    target?: PushPreviewTarget;\n\n    // The title to be displayed.\n    title: string;\n\n    // The optional message.\n    message?: string;\n\n    // The optional sub title (iOS only).\n    subTitle?: string;\n\n    // The url to the icon.\n    iconUrl?: string;\n\n    // The url to the image.\n    imageUrl?: string;\n\n    buttons?: readonly PushPreviewButton[];\n}\n\ninterface PushPreviewButton {\n    // The label displayed to the user for the action button.\n    title: string;\n\n    // The URL of a small icon for the action button. An alternative to icons is to include emoticons or other symbols inside the title.\n    iconUrl?: string;\n}\n\nexport const PushPreview = (props: PushPreviewProps) => {\n    const {\n        appName = '',\n        title,\n        message,\n        iconUrl,\n        buttons,\n        imageUrl,\n        subTitle,\n    } = props;\n\n    return (\n        <div className='test'>\n            <Image className='image' src={imageUrl} />\n\n\n            <div>\n                <Image className='icon' src={iconUrl} fallbackSrc='https://raw.githubusercontent.com/notifo-io/notifo/main/media/logo-square.png' />\n                \n                <span>{appName || 'Your App'}</span>\n            </div>\n\n            {title &&\n                <div>{title}</div>\n            }\n\n            {subTitle &&\n                <div>{subTitle}</div>\n            }\n\n            {message &&\n                <div>{message}</div>\n            }\n\n            {buttons &&\n                <div>\n                    {buttons.map((button, i) => \n                        <div key={i}>\n                            <Image src={button.iconUrl} />\n\n                            {button.title}\n                        </div>\n                    )}\n                </div>\n            }\n        </div>\n    );\n}\n\ninterface ImageProps {\n    className?: string;\n\n    // The fallback source.\n    fallbackSrc?: string;\n\n    // The size of the icon.\n    src?: string;\n}\n\nconst Image = ({ src, fallbackSrc: fallback, className }: ImageProps) => {\n    const [isLoaded, setIsLoaded] = React.useState(false);\n    const [imageSource, setImageSource] = React.useState(src);\n\n    React.useEffect(() => {\n        setImageSource(src || fallback);\n        setIsLoaded(false);\n    }, [src, fallback]);\n\n    const setLoaded = React.useCallback(() => {\n        if (src === imageSource || !imageSource) {\n            setIsLoaded\n        }\n        setIsLoaded(true);\n    }, [imageSource, src]);\n\n    const onError = React.useCallback(() => {\n        if (fallback) {\n            setImageSource(fallback);\n        }\n    }, [fallback]);\n\n    const style = isLoaded ? {} : { display: 'none' };\n\n    return (\n        <div className={className} style={style}>\n            <img src={src} onLoad={setLoaded} onError={onError} />\n        </div>\n    );\n};"],"names":["PushPreview","props","appName","title","message","iconUrl","buttons","imageUrl","subTitle","React","className","Image","src","fallbackSrc","map","button","i","key","fallback","isLoaded","setIsLoaded","imageSource","setImageSource","setLoaded","onError","style","display","onLoad"],"mappings":";;;;;;IAqCaA,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;uBASnBA,MAPAC;MAAAA,sCAAU;MACVC,QAMAF,MANAE;MACAC,UAKAH,MALAG;MACAC,UAIAJ,MAJAI;MACAC,UAGAL,MAHAK;MACAC,WAEAN,MAFAM;MACAC,WACAP,MADAO;AAGJ,SACIC,mBAAA,MAAA;AAAKC,IAAAA,SAAS,EAAC;GAAf,EACID,mBAAA,CAACE,KAAD;AAAOD,IAAAA,SAAS,EAAC;AAAQE,IAAAA,GAAG,EAAEL;GAA9B,CADJ,EAIIE,mBAAA,MAAA,MAAA,EACIA,mBAAA,CAACE,KAAD;AAAOD,IAAAA,SAAS,EAAC;AAAOE,IAAAA,GAAG,EAAEP;AAASQ,IAAAA,WAAW,EAAC;GAAlD,CADJ,EAGIJ,mBAAA,OAAA,MAAA,EAAOP,OAAO,IAAI,UAAlB,CAHJ,CAJJ,EAUKC,KAAK,IACFM,mBAAA,MAAA,MAAA,EAAMN,KAAN,CAXR,EAcKK,QAAQ,IACLC,mBAAA,MAAA,MAAA,EAAMD,QAAN,CAfR,EAkBKJ,OAAO,IACJK,mBAAA,MAAA,MAAA,EAAML,OAAN,CAnBR,EAsBKE,OAAO,IACJG,mBAAA,MAAA,MAAA,EACKH,OAAO,CAACQ,GAAR,CAAY,UAACC,MAAD,EAASC,CAAT;AAAA,WACTP,mBAAA,MAAA;AAAKQ,MAAAA,GAAG,EAAED;KAAV,EACIP,mBAAA,CAACE,KAAD;AAAOC,MAAAA,GAAG,EAAEG,MAAM,CAACV;KAAnB,CADJ,EAGKU,MAAM,CAACZ,KAHZ,CADS;AAAA,GAAZ,CADL,CAvBR,CADJ;AAoCH;;AAYD,IAAMQ,KAAK,GAAG,SAARA,KAAQ;MAAGC,WAAAA;MAAkBM,gBAAbL;MAAuBH,iBAAAA;;wBACTD,cAAA,CAAe,KAAf;MAAzBU;MAAUC;;yBACqBX,cAAA,CAAeG,GAAf;MAA/BS;MAAaC;;AAEpBb,EAAAA,eAAA,CAAgB;AACZa,IAAAA,cAAc,CAACV,GAAG,IAAIM,QAAR,CAAd;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAHD,EAGG,CAACR,GAAD,EAAMM,QAAN,CAHH;AAKA,MAAMK,SAAS,GAAGd,iBAAA,CAAkB;;AAIhCW,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GALiB,EAKf,CAACC,WAAD,EAAcT,GAAd,CALe,CAAlB;AAOA,MAAMY,OAAO,GAAGf,iBAAA,CAAkB;AAC9B,QAAIS,QAAJ,EAAc;AACVI,MAAAA,cAAc,CAACJ,QAAD,CAAd;AACH;AACJ,GAJe,EAIb,CAACA,QAAD,CAJa,CAAhB;AAMA,MAAMO,KAAK,GAAGN,QAAQ,GAAG,EAAH,GAAQ;AAAEO,IAAAA,OAAO,EAAE;AAAX,GAA9B;AAEA,SACIjB,mBAAA,MAAA;AAAKC,IAAAA,SAAS,EAAEA;AAAWe,IAAAA,KAAK,EAAEA;GAAlC,EACIhB,mBAAA,MAAA;AAAKG,IAAAA,GAAG,EAAEA;AAAKe,IAAAA,MAAM,EAAEJ;AAAWC,IAAAA,OAAO,EAAEA;GAA3C,CADJ,CADJ;AAKH,CA7BD;;;;"}